//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScarIntel.BrokerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentType", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class DocumentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
    [System.SerializableAttribute()]
    public partial class IllegalAccess : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
    [System.SerializableAttribute()]
    public partial class ServerError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BirthplaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Birthplace {
            get {
                return this.BirthplaceField;
            }
            set {
                if ((object.ReferenceEquals(this.BirthplaceField, value) != true)) {
                    this.BirthplaceField = value;
                    this.RaisePropertyChanged("Birthplace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Document", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class Document : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.Person PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.DocumentType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime emission_dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emission_localField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime expiration_dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.DocumentType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime emission_date {
            get {
                return this.emission_dateField;
            }
            set {
                if ((this.emission_dateField.Equals(value) != true)) {
                    this.emission_dateField = value;
                    this.RaisePropertyChanged("emission_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string emission_local {
            get {
                return this.emission_localField;
            }
            set {
                if ((object.ReferenceEquals(this.emission_localField, value) != true)) {
                    this.emission_localField = value;
                    this.RaisePropertyChanged("emission_local");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime expiration_date {
            get {
                return this.expiration_dateField;
            }
            set {
                if ((this.expiration_dateField.Equals(value) != true)) {
                    this.expiration_dateField = value;
                    this.RaisePropertyChanged("expiration_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Regist", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class Regist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.CrimeType CrimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.Participant[] ParticipantsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.CrimeType CrimeType {
            get {
                return this.CrimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CrimeTypeField, value) != true)) {
                    this.CrimeTypeField = value;
                    this.RaisePropertyChanged("CrimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.Participant[] Participants {
            get {
                return this.ParticipantsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantsField, value) != true)) {
                    this.ParticipantsField = value;
                    this.RaisePropertyChanged("Participants");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CrimeType", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class CrimeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Participant", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class Participant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.Person PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.Regist RegistField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.Regist Regist {
            get {
                return this.RegistField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistField, value) != true)) {
                    this.RegistField = value;
                    this.RaisePropertyChanged("Regist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchParams", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class SearchParams : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] filtersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int pageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] filters {
            get {
                return this.filtersField;
            }
            set {
                if ((object.ReferenceEquals(this.filtersField, value) != true)) {
                    this.filtersField = value;
                    this.RaisePropertyChanged("filters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int page {
            get {
                return this.pageField;
            }
            set {
                if ((this.pageField.Equals(value) != true)) {
                    this.pageField = value;
                    this.RaisePropertyChanged("page");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                if ((this.sizeField.Equals(value) != true)) {
                    this.sizeField = value;
                    this.RaisePropertyChanged("size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchResult", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class SearchResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int pageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.Person[] resultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int page {
            get {
                return this.pageField;
            }
            set {
                if ((this.pageField.Equals(value) != true)) {
                    this.pageField = value;
                    this.RaisePropertyChanged("page");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.Person[] result {
            get {
                return this.resultField;
            }
            set {
                if ((object.ReferenceEquals(this.resultField, value) != true)) {
                    this.resultField = value;
                    this.RaisePropertyChanged("result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                if ((this.sizeField.Equals(value) != true)) {
                    this.sizeField = value;
                    this.RaisePropertyChanged("size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BiometricType", Namespace="http://schemas.datacontract.org/2004/07/Domain.DataContract")]
    [System.SerializableAttribute()]
    public partial class BiometricType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ScarIntel.BrokerService.Person PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] dataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScarIntel.BrokerService.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="BrokerService", ConfigurationName="BrokerService.ServerService")]
    public interface ServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllDocumentType", ReplyAction="BrokerService/ServerService/GetAllDocumentTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllDocumentTypeIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllDocumentTypeServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.DocumentType[] GetAllDocumentType();
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllDocumentType", ReplyAction="BrokerService/ServerService/GetAllDocumentTypeResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.DocumentType[]> GetAllDocumentTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllPersonByIdRegist", ReplyAction="BrokerService/ServerService/GetAllPersonByIdRegistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllPersonByIdRegistIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllPersonByIdRegistServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.Person[] GetAllPersonByIdRegist(int idRegist);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllPersonByIdRegist", ReplyAction="BrokerService/ServerService/GetAllPersonByIdRegistResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.Person[]> GetAllPersonByIdRegistAsync(int idRegist);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllDocumentTypebyPerson", ReplyAction="BrokerService/ServerService/GetAllDocumentTypebyPersonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllDocumentTypebyPersonIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllDocumentTypebyPersonServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.Document[] GetAllDocumentTypebyPerson(int idperson);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllDocumentTypebyPerson", ReplyAction="BrokerService/ServerService/GetAllDocumentTypebyPersonResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.Document[]> GetAllDocumentTypebyPersonAsync(int idperson);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetRegists", ReplyAction="BrokerService/ServerService/GetRegistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetRegistsIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetRegistsServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.Regist[] GetRegists(int person_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetRegists", ReplyAction="BrokerService/ServerService/GetRegistsResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.Regist[]> GetRegistsAsync(int person_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllCrimeType", ReplyAction="BrokerService/ServerService/GetAllCrimeTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllCrimeTypeServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllCrimeTypeIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        ScarIntel.BrokerService.CrimeType[] GetAllCrimeType();
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllCrimeType", ReplyAction="BrokerService/ServerService/GetAllCrimeTypeResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.CrimeType[]> GetAllCrimeTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllPerson", ReplyAction="BrokerService/ServerService/GetAllPersonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllPersonServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllPersonIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        ScarIntel.BrokerService.SearchResult GetAllPerson(ScarIntel.BrokerService.SearchParams searchParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllPerson", ReplyAction="BrokerService/ServerService/GetAllPersonResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.SearchResult> GetAllPersonAsync(ScarIntel.BrokerService.SearchParams searchParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetPerson", ReplyAction="BrokerService/ServerService/GetPersonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetPersonIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetPersonServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.Person GetPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetPerson", ReplyAction="BrokerService/ServerService/GetPersonResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.Person> GetPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetBiometricTypes", ReplyAction="BrokerService/ServerService/GetBiometricTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetBiometricTypesServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetBiometricTypesIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        ScarIntel.BrokerService.BiometricType[] GetBiometricTypes(int person_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetBiometricTypes", ReplyAction="BrokerService/ServerService/GetBiometricTypesResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.BiometricType[]> GetBiometricTypesAsync(int person_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllRegists", ReplyAction="BrokerService/ServerService/GetAllRegistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllRegistsServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllRegistsIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        ScarIntel.BrokerService.Regist[] GetAllRegists();
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllRegists", ReplyAction="BrokerService/ServerService/GetAllRegistsResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.Regist[]> GetAllRegistsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllCrimeTypeByRegist", ReplyAction="BrokerService/ServerService/GetAllCrimeTypeByRegistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetAllCrimeTypeByRegistIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetAllCrimeTypeByRegistServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.CrimeType[] GetAllCrimeTypeByRegist(int idRegist);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetAllCrimeTypeByRegist", ReplyAction="BrokerService/ServerService/GetAllCrimeTypeByRegistResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.CrimeType[]> GetAllCrimeTypeByRegistAsync(int idRegist);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetBiometricType", ReplyAction="BrokerService/ServerService/GetBiometricTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetBiometricTypeIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetBiometricTypeServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        ScarIntel.BrokerService.BiometricType GetBiometricType(int person_id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetBiometricType", ReplyAction="BrokerService/ServerService/GetBiometricTypeResponse")]
        System.Threading.Tasks.Task<ScarIntel.BrokerService.BiometricType> GetBiometricTypeAsync(int person_id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetNumberOfParticipants", ReplyAction="BrokerService/ServerService/GetNumberOfParticipantsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/GetNumberOfParticipantsIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/GetNumberOfParticipantsServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        int GetNumberOfParticipants(int idRegist);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/GetNumberOfParticipants", ReplyAction="BrokerService/ServerService/GetNumberOfParticipantsResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfParticipantsAsync(int idRegist);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertParticipant", ReplyAction="BrokerService/ServerService/InsertParticipantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/InsertParticipantServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/InsertParticipantIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        int InsertParticipant(ScarIntel.BrokerService.Participant val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertParticipant", ReplyAction="BrokerService/ServerService/InsertParticipantResponse")]
        System.Threading.Tasks.Task<int> InsertParticipantAsync(ScarIntel.BrokerService.Participant val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertPerson", ReplyAction="BrokerService/ServerService/InsertPersonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/InsertPersonServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/InsertPersonIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        int InsertPerson(ScarIntel.BrokerService.Person val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertPerson", ReplyAction="BrokerService/ServerService/InsertPersonResponse")]
        System.Threading.Tasks.Task<int> InsertPersonAsync(ScarIntel.BrokerService.Person val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertRegist", ReplyAction="BrokerService/ServerService/InsertRegistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/InsertRegistServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/InsertRegistIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        int InsertRegist(ScarIntel.BrokerService.Regist val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertRegist", ReplyAction="BrokerService/ServerService/InsertRegistResponse")]
        System.Threading.Tasks.Task<int> InsertRegistAsync(ScarIntel.BrokerService.Regist val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertBiometricType", ReplyAction="BrokerService/ServerService/InsertBiometricTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/InsertBiometricTypeServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/InsertBiometricTypeIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        int InsertBiometricType(ScarIntel.BrokerService.BiometricType val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertBiometricType", ReplyAction="BrokerService/ServerService/InsertBiometricTypeResponse")]
        System.Threading.Tasks.Task<int> InsertBiometricTypeAsync(ScarIntel.BrokerService.BiometricType val);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertDocument", ReplyAction="BrokerService/ServerService/InsertDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.ServerError), Action="BrokerService/ServerService/InsertDocumentServerErrorFault", Name="ServerError", Namespace="http://schemas.datacontract.org/2004/07/Domain.ServiceContract")]
        [System.ServiceModel.FaultContractAttribute(typeof(ScarIntel.BrokerService.IllegalAccess), Action="BrokerService/ServerService/InsertDocumentIllegalAccessFault", Name="IllegalAccess", Namespace="http://schemas.datacontract.org/2004/07/Domain.FaultContract")]
        int InsertDocument(ScarIntel.BrokerService.Document doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="BrokerService/ServerService/InsertDocument", ReplyAction="BrokerService/ServerService/InsertDocumentResponse")]
        System.Threading.Tasks.Task<int> InsertDocumentAsync(ScarIntel.BrokerService.Document doc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServerServiceChannel : ScarIntel.BrokerService.ServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServiceClient : System.ServiceModel.ClientBase<ScarIntel.BrokerService.ServerService>, ScarIntel.BrokerService.ServerService {
        
        public ServerServiceClient() {
        }
        
        public ServerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ScarIntel.BrokerService.DocumentType[] GetAllDocumentType() {
            return base.Channel.GetAllDocumentType();
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.DocumentType[]> GetAllDocumentTypeAsync() {
            return base.Channel.GetAllDocumentTypeAsync();
        }
        
        public ScarIntel.BrokerService.Person[] GetAllPersonByIdRegist(int idRegist) {
            return base.Channel.GetAllPersonByIdRegist(idRegist);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.Person[]> GetAllPersonByIdRegistAsync(int idRegist) {
            return base.Channel.GetAllPersonByIdRegistAsync(idRegist);
        }
        
        public ScarIntel.BrokerService.Document[] GetAllDocumentTypebyPerson(int idperson) {
            return base.Channel.GetAllDocumentTypebyPerson(idperson);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.Document[]> GetAllDocumentTypebyPersonAsync(int idperson) {
            return base.Channel.GetAllDocumentTypebyPersonAsync(idperson);
        }
        
        public ScarIntel.BrokerService.Regist[] GetRegists(int person_id) {
            return base.Channel.GetRegists(person_id);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.Regist[]> GetRegistsAsync(int person_id) {
            return base.Channel.GetRegistsAsync(person_id);
        }
        
        public ScarIntel.BrokerService.CrimeType[] GetAllCrimeType() {
            return base.Channel.GetAllCrimeType();
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.CrimeType[]> GetAllCrimeTypeAsync() {
            return base.Channel.GetAllCrimeTypeAsync();
        }
        
        public ScarIntel.BrokerService.SearchResult GetAllPerson(ScarIntel.BrokerService.SearchParams searchParams) {
            return base.Channel.GetAllPerson(searchParams);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.SearchResult> GetAllPersonAsync(ScarIntel.BrokerService.SearchParams searchParams) {
            return base.Channel.GetAllPersonAsync(searchParams);
        }
        
        public ScarIntel.BrokerService.Person GetPerson(int id) {
            return base.Channel.GetPerson(id);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.Person> GetPersonAsync(int id) {
            return base.Channel.GetPersonAsync(id);
        }
        
        public ScarIntel.BrokerService.BiometricType[] GetBiometricTypes(int person_id) {
            return base.Channel.GetBiometricTypes(person_id);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.BiometricType[]> GetBiometricTypesAsync(int person_id) {
            return base.Channel.GetBiometricTypesAsync(person_id);
        }
        
        public ScarIntel.BrokerService.Regist[] GetAllRegists() {
            return base.Channel.GetAllRegists();
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.Regist[]> GetAllRegistsAsync() {
            return base.Channel.GetAllRegistsAsync();
        }
        
        public ScarIntel.BrokerService.CrimeType[] GetAllCrimeTypeByRegist(int idRegist) {
            return base.Channel.GetAllCrimeTypeByRegist(idRegist);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.CrimeType[]> GetAllCrimeTypeByRegistAsync(int idRegist) {
            return base.Channel.GetAllCrimeTypeByRegistAsync(idRegist);
        }
        
        public ScarIntel.BrokerService.BiometricType GetBiometricType(int person_id, string name) {
            return base.Channel.GetBiometricType(person_id, name);
        }
        
        public System.Threading.Tasks.Task<ScarIntel.BrokerService.BiometricType> GetBiometricTypeAsync(int person_id, string name) {
            return base.Channel.GetBiometricTypeAsync(person_id, name);
        }
        
        public int GetNumberOfParticipants(int idRegist) {
            return base.Channel.GetNumberOfParticipants(idRegist);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfParticipantsAsync(int idRegist) {
            return base.Channel.GetNumberOfParticipantsAsync(idRegist);
        }
        
        public int InsertParticipant(ScarIntel.BrokerService.Participant val) {
            return base.Channel.InsertParticipant(val);
        }
        
        public System.Threading.Tasks.Task<int> InsertParticipantAsync(ScarIntel.BrokerService.Participant val) {
            return base.Channel.InsertParticipantAsync(val);
        }
        
        public int InsertPerson(ScarIntel.BrokerService.Person val) {
            return base.Channel.InsertPerson(val);
        }
        
        public System.Threading.Tasks.Task<int> InsertPersonAsync(ScarIntel.BrokerService.Person val) {
            return base.Channel.InsertPersonAsync(val);
        }
        
        public int InsertRegist(ScarIntel.BrokerService.Regist val) {
            return base.Channel.InsertRegist(val);
        }
        
        public System.Threading.Tasks.Task<int> InsertRegistAsync(ScarIntel.BrokerService.Regist val) {
            return base.Channel.InsertRegistAsync(val);
        }
        
        public int InsertBiometricType(ScarIntel.BrokerService.BiometricType val) {
            return base.Channel.InsertBiometricType(val);
        }
        
        public System.Threading.Tasks.Task<int> InsertBiometricTypeAsync(ScarIntel.BrokerService.BiometricType val) {
            return base.Channel.InsertBiometricTypeAsync(val);
        }
        
        public int InsertDocument(ScarIntel.BrokerService.Document doc) {
            return base.Channel.InsertDocument(doc);
        }
        
        public System.Threading.Tasks.Task<int> InsertDocumentAsync(ScarIntel.BrokerService.Document doc) {
            return base.Channel.InsertDocumentAsync(doc);
        }
    }
}
